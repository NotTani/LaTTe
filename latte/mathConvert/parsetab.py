
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'ADDSUB_OP CLOSE_PAREN CONTROL_ID DIV_OP ENTITY EQUALS MATHEMATICAL_ID MULT_OP NUMBER OPEN_PAREN POWER SUBSCRIPT SYMBOLexpression : expression EQUALS expressionexpression : expression ADDSUB_OP termexpression : termterm : term MULT_OP factorterm : term DIV_OP factorterm : factorfactor : factor POWER factorfactor : factor SUBSCRIPT factorfactor : NUMBERfactor : SYMBOLfactor : MATHEMATICAL_ID OPEN_PAREN expression CLOSE_PARENfactor : ENTITYfactor : OPEN_PAREN expression CLOSE_PAREN'
    
_lr_action_items = {'NUMBER':([0,7,9,10,11,12,13,14,15,],[4,4,4,4,4,4,4,4,4,]),'SYMBOL':([0,7,9,10,11,12,13,14,15,],[5,5,5,5,5,5,5,5,5,]),'MATHEMATICAL_ID':([0,7,9,10,11,12,13,14,15,],[6,6,6,6,6,6,6,6,6,]),'ENTITY':([0,7,9,10,11,12,13,14,15,],[8,8,8,8,8,8,8,8,8,]),'OPEN_PAREN':([0,6,7,9,10,11,12,13,14,15,],[7,15,7,7,7,7,7,7,7,7,]),'$end':([1,2,3,4,5,8,17,18,19,20,21,22,24,25,],[0,-3,-6,-9,-10,-12,-1,-2,-4,-5,-7,-8,-13,-11,]),'EQUALS':([1,2,3,4,5,8,16,17,18,19,20,21,22,23,24,25,],[9,-3,-6,-9,-10,-12,9,9,-2,-4,-5,-7,-8,9,-13,-11,]),'ADDSUB_OP':([1,2,3,4,5,8,16,17,18,19,20,21,22,23,24,25,],[10,-3,-6,-9,-10,-12,10,10,-2,-4,-5,-7,-8,10,-13,-11,]),'CLOSE_PAREN':([2,3,4,5,8,16,17,18,19,20,21,22,23,24,25,],[-3,-6,-9,-10,-12,24,-1,-2,-4,-5,-7,-8,25,-13,-11,]),'MULT_OP':([2,3,4,5,8,18,19,20,21,22,24,25,],[11,-6,-9,-10,-12,11,-4,-5,-7,-8,-13,-11,]),'DIV_OP':([2,3,4,5,8,18,19,20,21,22,24,25,],[12,-6,-9,-10,-12,12,-4,-5,-7,-8,-13,-11,]),'POWER':([3,4,5,8,19,20,21,22,24,25,],[13,-9,-10,-12,13,13,13,13,-13,-11,]),'SUBSCRIPT':([3,4,5,8,19,20,21,22,24,25,],[14,-9,-10,-12,14,14,14,14,-13,-11,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'expression':([0,7,9,15,],[1,16,17,23,]),'term':([0,7,9,10,15,],[2,2,2,18,2,]),'factor':([0,7,9,10,11,12,13,14,15,],[3,3,3,3,19,20,21,22,3,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> expression","S'",1,None,None,None),
  ('expression -> expression EQUALS expression','expression',3,'p_expression_equals','parser.py',15),
  ('expression -> expression ADDSUB_OP term','expression',3,'p_expression_addsub_op','parser.py',20),
  ('expression -> term','expression',1,'p_expression_term','parser.py',25),
  ('term -> term MULT_OP factor','term',3,'p_term_multiply','parser.py',30),
  ('term -> term DIV_OP factor','term',3,'p_expression_fraction','parser.py',35),
  ('term -> factor','term',1,'p_term_factor','parser.py',40),
  ('factor -> factor POWER factor','factor',3,'p_term_power','parser.py',45),
  ('factor -> factor SUBSCRIPT factor','factor',3,'p_term_subscript','parser.py',50),
  ('factor -> NUMBER','factor',1,'p_factor_num','parser.py',55),
  ('factor -> SYMBOL','factor',1,'p_factor_symbol','parser.py',60),
  ('factor -> MATHEMATICAL_ID OPEN_PAREN expression CLOSE_PAREN','factor',4,'p_factor_func','parser.py',65),
  ('factor -> ENTITY','factor',1,'p_factor_entity','parser.py',78),
  ('factor -> OPEN_PAREN expression CLOSE_PAREN','factor',3,'p_factor_parenthetical','parser.py',83),
]
